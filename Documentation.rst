========================
 Kameleon documentation
========================

.. section-numbering::
.. contents:: Table of Contents

-------------------------------------------------------------------------------

Introduction
============

Kameleon should be seen as a simple but powerfull tool to generate customized appliances. 
With Kameleon, you make your recipe that describes how to create step by step your own distribution.
At start kameleon is used to create custom kvm, VirtualBox, iso images, ... but as it is designed 
to be very generic you can probably do a lot more than that.

Presentation
============

Kameleon is a ruby script that parses YAML files that can be either *recipes* or *Macrosteps*.
A *recipe* describes how you will build your appliance. It is a set of global variables declaration 
and a set of steps: the *Macrosteps* (which are stored in the "steps" directory). Each *Macrostep* is composed
of several *Microsteps* that, put together, will produce a bash script that will be executed.
Each *Microstep* definition is an array of kameleon commands. 
Each command is a {key => value} pair. The key is the name of the command, and the value is the argument.
It will result in a part of the bash script, automatically generated by the kameleon engine. 


A Microstep will look like: ::

  microstep_name:
    - Kameleon_cmd1:       something_to_do_with_this_command1
    - Kameleon_cmd2:       something_to_do_with_this_command2
    - ...
 

A Macrostep will look like: ::

  macrostep_name:
    - microstep1:
      - Kameleon_cmd1:       something_to_do_with_this_command1
      - Kameleon_cmd2:       something_to_do_with_this_command2
    - microstep2:
      - Kameleon_cmd1:       something_to_do_with_this_command1


Kameleon commands
=================

Each kameleon command does a particular shell command.
Kameleon commands are:

  - include:			yaml_file_to_include		=> Allows to include another macrostep yaml file
  - breakpoint:			text_to_display			=> Breakpoint the kameleon's execution
  - check_cmd:			cmd_to_check_if_available	=> Raise an error if the specified command does not exist on the host system 
  - check_cmd_chroot:		cmd_to_check_if_available	=> Raise an error if the specified command does not exist inside a chroot in the appliance system 
  - exec_current:		cmd				=> Execute the given bash scriptlet on the host system from the current directory (the one from which kameleon has been run) 
  - exec_appliance:		cmd				=> Execute the given bash scriptlet on the host system from the root of the appliance directory 
  - exec_chroot:		cmd				=> Execute the given bash scriptlet inside a chroot of the appliance directory 
  - append_file:						=> Append a content to a file of the appliance (relative to the root of the appliance). This commands takes an array of 2 elements as an argument: the first element is the name of the file and the second one is the content to be appended to the file. 

     - file_path
     - \|

       lines_to_append
  - write_file:							=> Write a content into a file of the appliance. If the file already exists, erase it. Else, create it. This commands takes an array of 2 elements as an argument: the first element is the name of the file and the second one is the content to be writed into the file. 

     - file_path
     - \|

       lines_to_write
  - set_var:							=> Set up a bash variable that may be used by latter microsteps. The argument is a 2 element array (name of the variable, value of the variable) 

     - variable
     - \|

       value


Making your own recipes
=======================

Define a global variable and use it
-----------------------------------

To define a global variable in kameleon, you just have do define it in the *global* section of your recipe,
then to access it in a microstep command, simply call $$my_global_var.


Create a recipe
---------------

You will describe your recipe through a YAML file that.
A recipe file is a configuration file. It has a global part configuring some variables 
and a steps part listing all the steps (macrosteps composed of microsteps) that have 
to be executed in the given order. In the global part, some variables are mandatory 
and others may be custom variables used into microsteps. In the steps part, 
if no microsteps are given, then it means that all the microsteps are executed in the 
order they have been defined into the corresponding macrostep file. 

Here is a simple example of e recipe file: ::

  global:
    distrib: debian-lenny
    workdir_base: /var/tmp/kameleon/
    distrib_repository: http://ftp.us.debian.org/debian/
    arch: i386
    kernel_arch: "686"
  steps:
    - check_deps
    - bootstrap
    - system_config
    - software_install
    - kernel_install
    - strip
    - build_appliance:
      - create_raw_image
      - copy_system_tree
      - install_grub
      - save_as_raw
      - save_as_qcow2
      - clean
    - clean



Here, *create_raw_image*, *install_grub*, ... are microsteps and *build_appliance*, *bootstrap*, ...
are macrosteps. In this recipe, in the *build_appliance* macrostep definition, only the specified
microsteps will be called, on all the other macrosteps, all the microsteps composing them will be called.



Installing kameleon
===================


Prerequisites to the kameleon installation:
Make sure ruby, debootstrap, rsync, parted, kpartx, losetup, dmsetup, grub-install, awk, sed are installed
on your computer, you may also need qemu-img and VBoxManage to generate qemu or VirtualBox images.

The only non-standard ruby module that's needed is "session". Installation tarball can be 
found in the *redist* directory.
Upon extracting, session module can be installed by invoking "ruby install.rb" script.

Note: also available as a gem: "gem install session" and then run as "sudo ruby -rubygems ./kameleon.rb"

To run kameleon, simply run as root (because we need to create a chroot): ::

   $ sudo ./kameleon.rb path_to_your_recipe_file.yaml

This will, by default, create appliances in /var/tmp/kameleon/<timestamp>/debian-lenny.{raw|vmdk|qcow2|vdi}
and tgz-ed system in /var/tmp/kameleon/<timestamp>/debian-lenny.tgz


Using appliances
================

    - Username/password for appliance: kameleon/kameleon
    - Becoming root: sudo -s
    - Mysql user/pass: root/kameleon
    - Hostname: oar
    - Network is configured for dhcp
    - Appliances are preconfigured to use OpenDSN servers
    - X can be started using "startx" (fedora still needs some tweaking here)


If something goes wrong
=======================

If something goes wrong and kameleon hangs or you need to kill it, there's a helper script to be used for cleaning. 
It's very important to run this script right after the kameleon process dies (i.e. before starting kameleon again), 
because some important resources might be deadlocked (proc filesystem mounted inside chroot, image mounted on loop device etc).

Run the clean script: ::

  $ sudo /bin/bash /var/tmp/kameleon/<timestamp>/clean.sh



Directory structure:
====================
::

   --/recipes
    |
    |/redist
    |
    |/steps/default
          |
          |/include
          |
          |/debian-lenny


Since you pass path to the recipe file as a command line arg, recipes can be stored anywhere. 
Macrostep definitions, however, have to be stored in the dir structure under the "steps" dir.
In the recipe file, under global->distrib, one defines distribution name. Kameleon uses that 
info to look for macrostep definition files under "<kameleon_root>/steps/$distrib/". 
If the file can't be found there, kameleon looks into "default" dir 
(one such example is /steps/default/clean.yaml).


Provided recipes
================

Recipes are stored in "<kameleon_root>/recipes/" directory.


There are two recipes:

 - debian-lenny.yaml
 - fedora-10.yaml

IMPORTANT: if you have mysqld, apache or sshd running on the building platform, shut them down before starting kameleon.

Feel free to take a look at macrostep files. You'll find some lines quoted with single hash (#), and some others with double hash (##). 
Those that are quoted with single hash are working pieces of code that is opted out, and you can plug it in by removing the hashes. 
One such example is installation of X server in fedora recipe. Lines that are quoted with double hash are non working code, probably 
some legacy or work in progres, and in most of the cases, you should just live them like that.

Debian lenny
------------

Prerequisites: debootstrap, rsync, parted, kpartx, losetup, dmsetup, grub-install, awk, sed, qemu-img, VBoxManage

If you're using Debian/Ubuntu as building platform, all dependencies can be installed using apt-get and default repositories.

By default, recipe will download and build i386 system. If you want to build appliances for amd64 platform, you would have to:

 - use 64bit system as building platform
 - alter "arch" and "kernel_arch" and set them both to "amd64"

Fedora 10
---------

Prerequisites: debootstrap, rsync, parted, kpartx, losetup, dmsetup, grub-install, awk, sed, qemu-img, VBoxManage

If you're using Debian/Ubuntu as building platform, all dependencies but rinse can be installed using apt-get and default repositories. 
Rinse is also available, but it's outdated and somehow broken. The best way to work around is to manually download and install 
Rinse from here: http://www.xen-tools.org/software/rinse/rinse-1.7.tar.gz. Don't for get to take a look at Rinse's INSTALL - 
it says you need rpm and rpm2cpio commands installed on the building platform.

By default, recipe will download and build i386 system. If you want to build appliances for amd64 platform, you would have to:

 - use 64bit system as building platform
 - alter "arch" set it to "amd64"
