build_appliance_custom_fs_big:
 - clean_udev:
   - exec_appliance:       rm -f etc/udev/rules.d/*persistent-net.rules*
 - save_as_tgz:
   - exec_current:         cd $$workdir; tar -czf $$distrib.tar.gz -C chroot .
 - create_raw_image:
   - check_cmd:            /sbin/sfdisk
   - exec_appliance:       dd if=/dev/zero of=$$workdir/image.raw bs=1M count=1 seek=10000
   - exec_appliance:       echo -e "1,1200,83,*\n1201,,82" | /sbin/sfdisk $$workdir/image.raw
 - create_nbd_device:
   - check_cmd:            kvm-nbd
   - exec_appliance:       modprobe nbd max_part=8
   - exec_appliance:       export NBD_DEVICE=/dev/nbd11 # Need a way to automatically find a free one 
   - exec_appliance:       kvm-nbd -c $NBD_DEVICE $$workdir/image.raw
   - exec_on_clean:        kvm-nbd -d $NBD_DEVICE
   - exec_appliance:       sleep 5
 - mkfs:
   - exec_appliance:       mkfs.$$output_environment_file_system_type ${NBD_DEVICE}p1
   - exec_appliance:       export SWAP_UUID=`mkswap ${NBD_DEVICE}p2|egrep -o "UUID=(.*)"|cut -d= -f2`
 - mount_image:
   - exec_appliance:       mkdir $$workdir/mnt
   - exec_appliance:       mount ${NBD_DEVICE}p1 $$workdir/mnt
   - exec_on_clean:        umount ${NBD_DEVICE}p1 ||true
 - copy_system_tree:
   - exec_appliance:       rsync -a --exclude "/proc/" $$chroot/* $$workdir/mnt && mkdir $$workdir/mnt/proc
 - remove_old_device_map:
   - exec_appliance:       echo "" > $$workdir/mnt/boot/grub/device.map
 - grub_197_workaround:
   - exec_appliance:       mkdir -p $$workdir/mnt/boot/grub
   - exec_appliance:       echo "(hd0,1) ${NBD_DEVICE}p1" > $$workdir/mnt/boot/grub/device.map
 - install_grub:
   - exec_appliance:       mkdir -p $$workdir/mnt/boot/grub
   - exec_appliance:       echo "(hd0) $NBD_DEVICE" >> $$workdir/mnt/boot/grub/device.map
   - exec_appliance:       grub-install --root-directory=$$workdir/mnt --modules="biosdisk part_msdos" $NBD_DEVICE
   - exec_appliance:       export kernel=`ls $$workdir/mnt/boot/vmlinuz* | grep -o "2.6.*"`
   - exec_appliance:       export hda1=`grub-probe -t fs_uuid -d ${NBD_DEVICE}p1`
   - exec_appliance:       echo "UUID=$hda1 / $$output_environment_file_system_type errors=remount-ro 0 1" >> $$workdir/mnt/etc/fstab
   - exec_appliance:       echo "UUID=$SWAP_UUID none swap sw 0 0" >> $$workdir/mnt/etc/fstab
   - exec_appliance:       echo "set default=0" > $$workdir/mnt/boot/grub/grub.cfg
   - exec_appliance:       echo "set timeout=3" >> $$workdir/mnt/boot/grub/grub.cfg
   - exec_appliance:       echo "set root='(hd0,1)'" >> $$workdir/mnt/boot/grub/grub.cfg
   - exec_appliance:       echo "menuentry \"$kernel\" {" >> $$workdir/mnt/boot/grub/grub.cfg
   - exec_appliance:       echo "  linux /boot/vmlinuz-$kernel root=UUID=$hda1 ro" >> $$workdir/mnt/boot/grub/grub.cfg
   - exec_appliance:       export INITRD=`find ./boot -name "initrd*$kernel*"|head -1|tail -c +2`
   - exec_appliance:       echo "  initrd $INITRD" >> $$workdir/mnt/boot/grub/grub.cfg
   - exec_appliance:       echo "}" >> $$workdir/mnt/boot/grub/grub.cfg
   - exec_appliance:       echo "(hd0) /dev/hda" > $$workdir/mnt/boot/grub/device.map
 - old_kernel_workaround:
   - exec_appliance:       perl -pi -e "s,UUID=.*$$output_environment_file_system_type,/dev/hda1 / $$output_environment_file_system_type," $$workdir/mnt/etc/fstab
   - exec_appliance:       perl -pi -e "s,UUID=.*swap,/dev/hda2 none swap," $$workdir/mnt/etc/fstab
   - exec_chroot:          mkinitrd -f /boot/initrd-$kernel.img $kernel
 - umount_image:
   - exec_appliance:       umount $$workdir/mnt
   - exec_appliance:       rm -rf $$workdir/mnt
   - exec_appliance:       kvm-nbd -d ${NBD_DEVICE}
 - save_as_raw:
   - exec_appliance:       mv $$workdir/image.raw $$workdir/$$distrib.raw
   - exec_appliance:       cd $$workdir; ln -s $$distrib.raw image.raw
 - save_as_vmdk:
   - check_cmd:            kvm-img
   - exec_appliance:       kvm-img convert -f raw $$workdir/image.raw -O vmdk $$workdir/$$distrib.vmdk
   - write_file:
     - /tmp/$$distrib.vmx
     - |
       #!/usr/bin/vmplayer
       
       # This is a Workstation 5 or 5.5 config file
       # It can be used with Player
       config.version = \"8\"
       virtualHW.version = \"4\"
       
       displayName = \"OAR Appliance - $$distrib $$arch\"
       numvcpus = \"1\"
       memsize = \"256\"
       MemAllowAutoScaleDown = \"FALSE\"
       MemTrimRate = \"-1\"
       uuid.action = \"create\"
       # Startup hints interfers with automatic startup of a virtual machine
       # This setting has no effect in VMware Player
       hints.hideAll = \"TRUE\"
       
       # Enable time synchronization between computer
       # and virtual machine
       tools.syncTime = \"TRUE\"
       
       serial0.present = \"FALSE\"
       serial1.present = \"FALSE\"
       parallel0.present = \"FALSE\"
       
       isolation.tools.hgfs.disable = \"FALSE\"
       isolation.tools.dnd.disable = \"FALSE\"
       isolation.tools.copy.enable = \"TRUE\"
       isolation.tools.paste.enabled = \"TRUE\"
       
       # First network interface card
       # Change this address if you need to create several virtual machines.
       # See http://www.vmware.com/support/esx21/doc/esx21admin_MACaddress.html
       ethernet0.present = \"TRUE\"
       ethernet0.virtualDev = \"e1000\"
       ethernet0.connectionType = \"nat\"
       ethernet0.addressType = \"static\"
       ethernet0.address = \"00:50:56:3F:12:00\"
       
       floppy0.present = \"FALSE\"
       
       # First IDE disk
       ide0:0.present = \"TRUE\"
       ide0:0.fileName = \"$$distrib.vmdk\"
       ide0:0.mode = \"persistent\"
       ide0:0.startConnected = \"TRUE\"
       ide0:0.writeThrough = \"TRUE\"
       
       tools.remindInstall = \"TRUE\"
       
       extendedConfigFile = \"$$distrib.vmxf\"
       virtualHW.productCompatibility = \"hosted\"
       tools.upgrade.policy = \"manual\"
       
       uuid.location = \"56 4d 82 82 8e ce 66 fb-e1 28 4f d3 7c 6b a3 d0\"
       uuid.bios = \"56 4d 82 82 8e ce 66 fb-e1 28 4f d3 7c 6b a3 d0\"
       
       ide0:0.redo = \"\"
   - exec_appliance: if [ "$$arch" = "amd64" ]; then echo '       guestOS = "other26xlinux-64" ' >> $$chroot/tmp/$$distrib.vmx; else echo '       guestOS = "other26xlinux" ' >> $$chroot/tmp/$$distrib.vmx; fi
   - exec_appliance:       mv $$chroot/tmp/$$distrib.vmx $$workdir/
 - save_as_qcow2:
   - check_cmd:            kvm-img
   - exec_appliance:       kvm-img convert -c -f raw $$workdir/image.raw -O qcow2 $$workdir/$$distrib.qcow2
 - save_as_vdi:
   - check_cmd:            VBoxManage
   - exec_appliance:       VBoxManage convertdd $$workdir/image.raw $$workdir/$$distrib.vdi
 - save_as_iso:
   - check_cmd:            wget
   - exec_chroot:          "ldd /lib/libc.so.6 |grep x86-64 && ( echo -e \"\\n\\nERROR: Iso image can only be made with a 32 bits appliance. Please, put 'arch: i386' into your recipe.\\n\\n\" ; exit 1 ) || true" 
   - exec_appliance:       export LINUX_LIVE_VERSION="6.3.0"
   - exec_appliance:       export LINUX_LIVE_KVERSION="2.6.27.27-i486-1"
   - exec_appliance:       "[ ! -s $$workdir_base/linux-live-${LINUX_LIVE_VERSION}.tar.gz ] && wget -q -O $$workdir_base/linux-live-${LINUX_LIVE_VERSION}.tar.gz -c http://oar.imag.fr/live/linux-live-${LINUX_LIVE_VERSION}.tar.gz || true"
   - exec_appliance:       "[ ! -s $$workdir_base/linux-${LINUX_LIVE_KVERSION}.tgz ] && wget -q -O $$workdir_base/linux-${LINUX_LIVE_KVERSION}.tgz -c http://oar.imag.fr/live/linux-${LINUX_LIVE_KVERSION}.tgz || true"
   - exec_appliance:       tar zxf $$workdir_base/linux-live-${LINUX_LIVE_VERSION}.tar.gz -C tmp/
   - exec_appliance:       tar zxf $$workdir_base/linux-${LINUX_LIVE_KVERSION}.tgz
   - exec_appliance:       KVERSION=`echo $LINUX_LIVE_KVERSION|cut -d"-" -f1`
   - exec_appliance:       perl -pi -e "s/^KERNEL=.*/KERNEL=$KVERSION/" tmp/linux-live-$LINUX_LIVE_VERSION/.config
   - exec_appliance:       perl -pi -e "s/read NEWLIVECDNAME/NEWLIVECDNAME=kameleon;echo/" tmp/linux-live-$LINUX_LIVE_VERSION/build
   - exec_appliance:       perl -pi -e "s,read NEWKERNEL,NEWKERNEL=/boot/vmlinuz;echo," tmp/linux-live-$LINUX_LIVE_VERSION/build
   - exec_appliance:       perl -pi -e "s/read junk/echo/" tmp/linux-live-$LINUX_LIVE_VERSION/build
   - exec_appliance:       perl -pi -e "s,read ISONAME,ISONAME=/tmp/kameleon.iso;echo," tmp/linux-live-$LINUX_LIVE_VERSION/cd-root/linux/make_iso.sh
# Comment the following line to enable compression:
   - exec_appliance:       perl -pi -e "s/(create_module.*)/\$1 -noD -noF -noI/" tmp/linux-live-$LINUX_LIVE_VERSION/build
   - exec_chroot:          depmod -a $KVERSION
   - exec_chroot:          bash -c "cd /tmp/linux-live-$LINUX_LIVE_VERSION && ./build"
   - exec_chroot:          bash -c "cd /tmp/live_data* && ./kameleon/make_iso.sh"
   - exec_appliance:       mv $$workdir/chroot/tmp/kameleon.iso $$workdir/$$distrib.iso
 - clean:
   - exec_appliance:       rm $$workdir/image.raw
