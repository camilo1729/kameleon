build_appliance_kpartx:
 - clean_udev:
   - exec_appliance:       rm -f etc/udev/rules.d/*persistent-net.rules*
 - clean_cache:
   - exec_appliance:       rm -f etc/apt/apt.conf.d/05kameleon_no_download
 - apt_cache_save:
   - exec_appliance:       tar cvf $$workdir/packages_cache.tar -C $$chroot var/cache/apt/archives
 - save_as_tgz:
   - exec_current:         cd $$workdir; tar -czf $$distrib.tar.gz -C chroot .
 - create_raw_image:
   - check_cmd:            /sbin/sfdisk
   - exec_appliance:       dd if=/dev/zero of=$$workdir/image.raw bs=1M count=1 seek=5000 # seek=3000
   - exec_appliance:       echo -e "1,574,83,*\n575,,82" | /sbin/sfdisk $$workdir/image.raw
 - attach_kpartx_device:
   - check_cmd:            kpartx
   - exec_appliance:       export LO_DEVICE=`kpartx -a -v $$workdir/image.raw | head -n 1 | cut -d' ' -f 8`
   - exec_appliance:       export LO_DEVICE_PARTBASE=/dev/mapper/`basename ${LO_DEVICE}`
 #  - exec_on_clean:        rm ${LO_DEVICE_PARTBASE}
 - mkfs:
   - exec_appliance:       mkfs.$$output_environment_file_system_type ${LO_DEVICE_PARTBASE}p1
   - exec_appliance:       export SWAP_UUID=`mkswap ${LO_DEVICE_PARTBASE}p2|egrep -o "UUID=(.*)"|cut -d= -f2`
 - mount_image:
   - exec_appliance:       mkdir $$workdir/mnt
   - exec_appliance:       mount ${LO_DEVICE_PARTBASE}p1 $$workdir/mnt
   - exec_appliance:       echo "umount $LO_DEVICE_PARTBASE ||true" >> $$workdir/clean.sh
 - copy_system_tree:
   - exec_appliance:       rsync -a --exclude "/proc/" --exclude "/sys/" $$chroot/* $$workdir/mnt && mkdir $$workdir/mnt/proc && mkdir $$workdir/mnt/sys
 - grub_197_workaround:
   - exec_appliance:       mkdir -p $$workdir/mnt/boot/grub
   - exec_appliance:       echo "(hd0,1) ${LO_DEVICE_PARTBASE}p1" > $$workdir/mnt/boot/grub/device.map
 - install_grub:
   - exec_appliance:       mkdir -p $$workdir/mnt/boot/grub
   - exec_appliance:       echo "(hd0) $LO_DEVICE" >> $$workdir/mnt/boot/grub/device.map
   - exec_appliance:       grub-install --root-directory=$$workdir/mnt --modules="biosdisk part_msdos" $LO_DEVICE
   - exec_appliance:       export kernel=`ls $$workdir/mnt/boot/vmlinuz* | grep -o "2.6.*"`
   - exec_appliance:       export hda1=`grub-probe -t fs_uuid -d ${LO_DEVICE_PARTBASE}p1`
   - exec_appliance:       echo "UUID=$hda1 / $$output_environment_file_system_type  errors=remount-ro 0 1" >> $$workdir/mnt/etc/fstab
   - exec_appliance:       echo "UUID=$SWAP_UUID none swap sw 0 0" >> $$workdir/mnt/etc/fstab
   - exec_appliance:       echo "set default=0" > $$workdir/mnt/boot/grub/grub.cfg
   - exec_appliance:       echo "set timeout=3" >> $$workdir/mnt/boot/grub/grub.cfg
   - exec_appliance:       echo "set root='(hd0,1)'" >> $$workdir/mnt/boot/grub/grub.cfg
   - exec_appliance:       echo "menuentry \"$kernel\" {" >> $$workdir/mnt/boot/grub/grub.cfg
   - exec_appliance:       echo "  linux /boot/vmlinuz-$kernel root=UUID=$hda1 ro" >> $$workdir/mnt/boot/grub/grub.cfg
   - exec_appliance:       export INITRD=`find ./boot -name "initrd*$kernel*"|head -1|tail -c +2`
   - exec_appliance:       echo "  initrd $INITRD" >> $$workdir/mnt/boot/grub/grub.cfg
   - exec_appliance:       echo "}" >> $$workdir/mnt/boot/grub/grub.cfg
   - exec_appliance:       echo "(hd0) /dev/hda" > $$workdir/mnt/boot/grub/device.map
 - get_kernel_initrd:
   - exec_appliance:       export kernel=`basename $$workdir/mnt/boot/vmlinuz*`
   - exec_appliance:       export initrd=`basename $$workdir/mnt/boot/initrd.img*`
 - get_kernel_initrd_arch:
   - exec_appliance:       export kernel=`basename $$workdir/mnt/boot/vmlinuz*`
   - exec_appliance:       export initrd=`basename $$workdir/mnt/boot/*linux.img`
 - install_extlinux:
   - exec_appliance:       mkdir -p $$workdir/mnt/boot
   - exec_appliance:       export UIID=`blkid -s UUID -o value ${LO_DEVICE_PARTBASE}p1`
   - exec_appliance:       echo "UIID=$UIID   /   $$output_environment_file_system_type defaults  0  1" >> $$workdir/mnt/etc/fstab
   - exec_appliance:       extlinux --install $$workdir/mnt/boot/
   - exec_appliance:       dd if=/usr/lib/syslinux/mbr.bin conv=notrunc bs=440 count=1 of=$LO_DEVICE
   - exec_appliance:       echo "DEFAULT kameleon" > $$workdir/mnt/boot/extlinux.conf
   - exec_appliance:       echo "LABEL   kameleon" >> $$workdir/mnt/boot/extlinux.conf
   - exec_appliance:       echo "SAY     Booting appliance" >> $$workdir/mnt/boot/extlinux.conf
   - exec_appliance:       echo "LINUX   /boot/$kernel" >> $$workdir/mnt/boot/extlinux.conf
   - exec_appliance:       echo "APPEND  root=/dev/disk/by-uuid/$UIID" >> $$workdir/mnt/boot/extlinux.conf
   - exec_appliance:       echo "INITRD  /boot/$initrd" >> $$workdir/mnt/boot/extlinux.conf
 - install_extlinux_for_arch:
   - exec_appliance:       mkdir -p $$workdir/mnt/boot
   - exec_appliance:       export UIID=`blkid -s UUID -o value /dev/mapper/loop0p1`
   - exec_appliance:       export kernel="vmlinuz-linux"
   - exec_appliance:       export initrd="initramfs-linux.img"
   - exec_appliance:       echo "UIID=$UIID   /   $$output_environment_file_system_type defaults  0  1" >> $$workdir/mnt/etc/fstab
   - exec_appliance:       extlinux --install $$workdir/mnt/boot/
   - exec_appliance:       dd if=/usr/lib/syslinux/mbr.bin conv=notrunc bs=440 count=1 of=/dev/$LOOP_DEVICE
   - exec_appliance:       echo "DEFAULT debian" > $$workdir/mnt/boot/extlinux.conf
   - exec_appliance:       echo "LABEL   debian" >> $$workdir/mnt/boot/extlinux.conf
   - exec_appliance:       echo "SAY     Booting debian" >> $$workdir/mnt/boot/extlinux.conf
   - exec_appliance:       echo "LINUX   /boot/$kernel" >> $$workdir/mnt/boot/extlinux.conf
   - exec_appliance:       echo "APPEND  root=/dev/disk/by-uuid/$UIID" >> $$workdir/mnt/boot/extlinux.conf
   - exec_appliance:       echo "INITRD  /boot/$initrd" >> $$workdir/mnt/boot/extlinux.conf

 - old_kernel_workaround:
   - exec_appliance:       perl -pi -e "s,UUID=.*ext3,/dev/hda1 / ext3," $$workdir/mnt/etc/fstab
   - exec_appliance:       perl -pi -e "s,UUID=.*swap,/dev/hda2 none swap," $$workdir/mnt/etc/fstab
   - exec_chroot:          mkinitrd -f /boot/initrd-$kernel.img $kernel
 - umount_image:
   - exec_appliance:       umount $$workdir/mnt
   - exec_appliance:       kpartx -d $LO_DEVICE
   - exec_appliance:       losetup -d $LO_DEVICE
   - exec_appliance:       rm -rf $$workdir/mnt
 - save_as_raw:
   - exec_appliance:       mv $$workdir/image.raw $$workdir/$$distrib.raw
   - exec_appliance:       cd $$workdir; ln -s $$distrib.raw image.raw
 - save_as_vmdk:
   - check_cmd:            kvm-img
   - exec_appliance:       kvm-img convert -f raw $$workdir/image.raw -O vmdk $$workdir/$$distrib.vmdk
   - erb_config:
     - config.vmx.erb
     - $$chroot/tmp/$$distrib.vmx
   - exec_appliance:       mv $$chroot/tmp/$$distrib.vmx $$workdir/
 - save_as_qcow2:
   - check_cmd:            kvm-img
   - exec_appliance:       kvm-img convert -c -f raw $$workdir/image.raw -O qcow2 $$workdir/$$distrib.qcow2
 - save_as_vdi:
   - check_cmd:            VBoxManage
   - exec_appliance:       VBoxManage convertdd $$workdir/image.raw $$workdir/$$distrib.vdi
 - save_as_iso:
   - check_cmd:            wget
   - exec_chroot:          "ldd /lib/libc.so.6 |grep x86-64 && ( echo -e \"\\n\\nERROR: Iso image can only be made with a 32 bits appliance. Please, put 'arch: i386' into your recipe.\\n\\n\" ; exit 1 ) || true" 
   - exec_appliance:       export LINUX_LIVE_VERSION="6.3.0"
   - exec_appliance:       export LINUX_LIVE_KVERSION="2.6.27.27-i486-1"
   - exec_appliance:       "[ ! -s $$workdir_base/linux-live-${LINUX_LIVE_VERSION}.tar.gz ] && wget -q -O $$workdir_base/linux-live-${LINUX_LIVE_VERSION}.tar.gz -c http://oar.imag.fr/live/linux-live-${LINUX_LIVE_VERSION}.tar.gz || true"
   - exec_appliance:       "[ ! -s $$workdir_base/linux-${LINUX_LIVE_KVERSION}.tgz ] && wget -q -O $$workdir_base/linux-${LINUX_LIVE_KVERSION}.tgz -c http://oar.imag.fr/live/linux-${LINUX_LIVE_KVERSION}.tgz || true"
   - exec_appliance:       tar zxf $$workdir_base/linux-live-${LINUX_LIVE_VERSION}.tar.gz -C tmp/
   - exec_appliance:       tar zxf $$workdir_base/linux-${LINUX_LIVE_KVERSION}.tgz
   - exec_appliance:       KVERSION=`echo $LINUX_LIVE_KVERSION|cut -d"-" -f1`
   - exec_appliance:       perl -pi -e "s/^KERNEL=.*/KERNEL=$KVERSION/" tmp/linux-live-$LINUX_LIVE_VERSION/.config
   - exec_appliance:       perl -pi -e "s/read NEWLIVECDNAME/NEWLIVECDNAME=kameleon;echo/" tmp/linux-live-$LINUX_LIVE_VERSION/build
   - exec_appliance:       perl -pi -e "s,read NEWKERNEL,NEWKERNEL=/boot/vmlinuz;echo," tmp/linux-live-$LINUX_LIVE_VERSION/build
   - exec_appliance:       perl -pi -e "s/read junk/echo/" tmp/linux-live-$LINUX_LIVE_VERSION/build
   - exec_appliance:       perl -pi -e "s,read ISONAME,ISONAME=/tmp/kameleon.iso;echo," tmp/linux-live-$LINUX_LIVE_VERSION/cd-root/linux/make_iso.sh
# Comment the following line to enable compression:
   - exec_appliance:       perl -pi -e "s/(create_module.*)/\$1 -noD -noF -noI/" tmp/linux-live-$LINUX_LIVE_VERSION/build
   - exec_chroot:          depmod -a $KVERSION
   - exec_chroot:          bash -c "cd /tmp/linux-live-$LINUX_LIVE_VERSION && ./build"
   - exec_chroot:          bash -c "cd /tmp/live_data* && ./kameleon/make_iso.sh"
   - exec_appliance:       mv $$workdir/chroot/tmp/kameleon.iso $$workdir/$$distrib.iso
 - clean:
   - exec_appliance:       rm $$workdir/image.raw
